// Definition for singly-linked list.
class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
}

public class LinkedListCycleDetection {

    public static boolean hasCycle(ListNode head) {
        if (head == null || head.next == null) {
            return false;
        }

        ListNode slow = head;
        ListNode fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;

            if (slow == fast) {
                return true;
            }
        }

        return false;
    }

    // Main method for testing
    public static void main(String[] args) {
        // Example usage:

        // Create a linked list with a cycle: 20 -> 30 -> 40 -> 60 -> 80 -> (points back to 40)
        ListNode node1 = new ListNode(20);
        ListNode node2 = new ListNode(30);
        ListNode node3 = new ListNode(40);
        ListNode node4 = new ListNode(60);
        ListNode node5 = new ListNode(80);

        node1.next = node2;
        node2.next = node3;
        node3.next = node4;
        node4.next = node5;
        node5.next = node3;  // Cycle here

        System.out.println("Has cycle: " + hasCycle(node1));  // Output: true

        // Create a linked list without a cycle: 6 -> 4 -> 2 -> 8
        ListNode node6 = new ListNode(6);
        ListNode node7 = new ListNode(4);
        ListNode node8 = new ListNode(2);
        ListNode node9 = new ListNode(8);

        node6.next = node7;
        node7.next = node8;
        node8.next = node9;

        System.out.println("Has cycle: " + hasCycle(node6));  // Output: false
    }
}
